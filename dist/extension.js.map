{"version":3,"sources":["webpack://gitAllInOne/./src/SidebarProvider.ts","webpack://gitAllInOne/./src/extension.ts","webpack://gitAllInOne/./src/getNonce.ts","webpack://gitAllInOne/external \"vscode\"","webpack://gitAllInOne/webpack/bootstrap","webpack://gitAllInOne/webpack/startup"],"names":["_extensionUri","webviewView","this","_view","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","data","type","value","vscode","commands","executeCommand","then","window","showInformationMessage","showErrorMessage","panel","styleResetUri","asWebviewUri","Uri","joinPath","styleVSCodeUri","scriptUri","styleMainUri","nonce","getNonce","cspSource","context","sidebarProvider","SidebarProvider","extensionUri","subscriptions","push","registerWebviewViewProvider","registerCommand","text","possible","i","charAt","Math","floor","random","length","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"ucAAA,eACA,SAEA,wBAIE,YAA6BA,GAAA,KAAAA,gBAEtB,mBAAmBC,GACxBC,KAAKC,MAAQF,EAEbA,EAAYG,QAAQC,QAAU,CAE5BC,eAAe,EAEfC,mBAAoB,CAACL,KAAKF,gBAG5BC,EAAYG,QAAQI,KAAON,KAAKO,mBAAmBR,EAAYG,SAE/DH,EAAYG,QAAQM,qBAA2BC,GAAS,EAAD,gCACrD,OAAQA,EAAKC,MACX,IAAK,OACH,IAAKD,EAAKE,MAAS,OACnB,OAAOC,EAAOC,SAASC,eAAe,gBAAgBC,MAAK,IAClDH,EAAOC,SACXC,eAAe,oBACfC,MAAK,IACGH,EAAOC,SAASC,eAAe,YAAYC,MAAK,KACrDH,EAAOI,OAAOC,uBAAuB,0BAK/C,IAAK,QACH,IAAIR,EAAKE,MAAQ,cACIC,EAAOC,SAASC,eAAe,eAElDF,EAAOI,OAAOC,uBAAuB,UAEvC,MAEF,IAAK,eACH,IAAKR,EAAKE,MAAS,cACIC,EAAOC,SAASC,eAAe,sBAEpDF,EAAOI,OAAOC,uBAAuB,YAEvC,MAEF,IAAK,SACH,IAAKR,EAAKE,MACR,OAEFC,EAAOI,OAAOC,uBAAuBR,EAAKE,OAC1C,MAEF,IAAK,UACH,IAAKF,EAAKE,MACR,OAEFC,EAAOI,OAAOE,iBAAiBT,EAAKE,aAOrC,OAAOQ,GACZnB,KAAKC,MAAQkB,EAGP,mBAAmBjB,GACzB,MAAMkB,EAAgBlB,EAAQmB,aAC5BT,EAAOU,IAAIC,SAASvB,KAAKF,cAAe,QAAS,cAE7C0B,EAAiBtB,EAAQmB,aAC7BT,EAAOU,IAAIC,SAASvB,KAAKF,cAAe,QAAS,eAG7C2B,EAAYvB,EAAQmB,aACxBT,EAAOU,IAAIC,SAASvB,KAAKF,cAAe,MAAO,wBAE3C4B,EAAexB,EAAQmB,aAC3BT,EAAOU,IAAIC,SAASvB,KAAKF,cAAe,MAAO,yBAI3C6B,EAAQ,EAAAC,WAEd,MAAO,uZAQmG1B,EAAQ2B,gCAAgCF,8GAEpIP,6CACAI,6CACIE,gDACGC,gIAKJA,WAAeF,iD,8FC7GpC,eACA,SAEA,oBAAyBK,GAEvB,MAAMC,EAAkB,IAAI,EAAAC,gBAAgBF,EAAQG,cAEpDH,EAAQI,cAAcC,KACpBvB,EAAOI,OAAOoB,4BAA4B,sBAAuBL,IAGnED,EAAQI,cAAcC,KACpBvB,EAAOC,SAASwB,gBAAgB,0BAA0B,KACxDzB,EAAOI,OAAOC,uBAAuB,oBAK3C,2B,+EClBA,sBACE,IAAIqB,EAAO,GACX,MAAMC,EACJ,iEACF,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASM,SAE9D,OAAOP,I,QCPTQ,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUE,KAAKP,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,QCjBRG,CAAoB,M","file":"extension.js","sourcesContent":["import * as vscode from \"vscode\";\nimport { getNonce } from \"./getNonce\";\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  _view?: vscode.WebviewView;\n  _doc?: vscode.TextDocument;\n\n  constructor(private readonly _extensionUri: vscode.Uri) {}\n\n  public resolveWebviewView(webviewView: vscode.WebviewView) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      // Allow scripts in the webview\n      enableScripts: true,\n\n      localResourceRoots: [this._extensionUri],\n    };\n\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    webviewView.webview.onDidReceiveMessage(async (data) => {\n      switch (data.type) {\n        case \"push\": {\n          if (!data.value) { return; }\n          return vscode.commands.executeCommand(\"git.stageAll\").then(() => {\n            return vscode.commands\n              .executeCommand(\"git.commitStaged\")\n              .then(() => {\n                return vscode.commands.executeCommand(\"git.sync\").then(() => {\n                  vscode.window.showInformationMessage(\"Changes pushed!\");\n                });\n              });\n          });\n        }\n        case \"merge\": {\n          if(!data.value) {return;}\n          const merged = await vscode.commands.executeCommand(\"git.merge\");\n          if (merged) {\n            vscode.window.showInformationMessage(\"Merged\");\n          }\n          break;\n        }\n        case \"revertCommit\": {\n          if (!data.value) { return; }\n          const reverted = await vscode.commands.executeCommand(\"git.revertCommit\");\n          if(reverted) {\n            vscode.window.showInformationMessage(\"Reverted\");\n          };\n          break;\n        }\n        case \"onInfo\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showInformationMessage(data.value);\n          break;\n        }\n        case \"onError\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showErrorMessage(data.value);\n          break;\n        }\n      }\n    });\n  }\n\n  public revive(panel: vscode.WebviewView) {\n    this._view = panel;\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    const styleResetUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\n    );\n    const styleVSCodeUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\n    );\n\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.js\")\n    );\n    const styleMainUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.css\")\n    );\n\n    // Use a nonce to only allow a specific script to be run.\n    const nonce = getNonce();\n\n    return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n        -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"img-src https: data:; style-src 'unsafe-inline' ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n        <script nonce=\"${nonce}\">\n          const tsvscode = acquireVsCodeApi();\n        </script>\n\t\t\t</head>\n      <body>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n  }\n}\n","import * as vscode from \"vscode\";\nimport { SidebarProvider } from \"./SidebarProvider\";\n\nexport function activate(context: vscode.ExtensionContext) {\n\n  const sidebarProvider = new SidebarProvider(context.extensionUri);\n\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(\"gitAllInOne-sidebar\", sidebarProvider)\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"gitAllInOne.helloWorld\", () => {\n      vscode.window.showInformationMessage(\"hello world\");\n    }));\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n","export function getNonce() {\n  let text = \"\";\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}